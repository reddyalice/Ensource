WHITESPACE = _{" "}
COMMENT = _{"@" ~ (!("@" | NEWLINE) ~ANY)* ~ ("@" | NEWLINE)}
indent = _{ "\t" | "----"}
identifier = @{ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*}
integer_literal = @{ASCII_DIGIT+ ~"i" | ASCII_DIGIT+}
char_literal = @{"'" ~ ANY  ~ "'"| ASCII_DIGIT+ ~"c"}
float_literal = @{ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* | "." ~ ASCII_DIGIT+}
bool_literal = @{"true" | "false" | "1b" | "0b" }
string_literal = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
hex_literal = @{"0x" ~ ('0'..'f')+} 
file_type = @{"necr" | "sorc" | "wiza" | "hexy"}
primitive = @{"bool" | "b" | ("u"? ~ ("int" |  "i" | "float" | "fixed" | "f" |  "fx"))}
sized_primitive = @{"char" | "c" |"string" | "str" | "s"}
typee = {(primitive ~ integer_literal? | sized_primitive | identifier)  ~ (pointer? ~ array?) }

add = {"+"} add_assign = {"+="}
sub = {"-"} sub_assign = {"-="}
and = {"&&" | "and"} and_assign = { "&=" }
or = {"||" | "or"} or_assign = { "|=" }
bigger = {">" | "above" }
lesser = {"<" | "below" }
mul = {"*"} mul_assign = {"*="}
divide = {"/"} div_assign = {"/="}
equal = {"==" | "is"}
not_equal = {"!=" | "is not"}
power = {"^"} pow_assign = {"^="}
b_equal = {">="}
l_equal = {"<="}
rem = {"%"}

incr = _{"++"}
decr = _{"--"}
not_s = _{"not" | "!"}
sign_s = _{"sign" | "&" }
unsign_s = _{"unsign" | "*"}
pointer = {"*"}
array = { "[" ~ integer_literal? ~ ("," ~ integer_literal)* ~ "]" }

say_or_calc = _{(calc | say)}

pre_incr = {incr ~ say}
post_incr = {say ~ incr}

pre_decr = {decr ~ say}
post_decr = {say ~ decr}

post = _{post_incr | post_decr}
pre = _ {pre_incr | pre_decr}


not = {not_s ~ say}
neg = {"-" ~ say}
sign = {sign_s ~ say}
unsign = {(unsign_s) ~ say}
transmute = {"transmute"? ~((say ~ "as" ~ typee) | (typee ~ "of" ~ say_or_calc))}
index = { say ~ "[" ~ say_or_calc ~ "]"}

//TODO matching needs to be done also randomness
//TODO anagrams, 

if_case = {"if " ~ say_or_calc ~ do_or_return ~ else_case?}
else_case  = {NEWLINE ~ PEEK_ALL ~ "else " ~ (if_case | do_or_return)}
channeling = {"channel " ~ ( (sigil_asg ~ "->" ~ say_or_calc ~ "<-"  ~ say_or_calc) | (identifier ~ (":" | "in ") ~ say) | say_or_calc) ~ do_or_return}
cond = _{if_case | channeling}
wait = {"wait " ~ say_or_calc}
stop = {("stop " ~ say_or_calc) | "stop"}
skip = {("skip " ~ "for" ~ integer_literal) | ("skip " ~ say_or_calc ~ ("for" ~ integer_literal)?) | ("skip")}
breaking = _{skip | stop | wait}

mal = { "crystal " | "entropic " }
privacy = {"forall " | "mine " }
target = {"golem" | "whisper" }
type_def = _{":" ~ typee}

binary_ops = _{add | sub | and | or | bigger | lesser | mul | divide | equal |not_equal | power | b_equal | l_equal | rem}
assign_ops = _{add_assign | sub_assign | and_assign | or_assign | mul_assign | div_assign | pow_assign}
assign_calc = {mal? ~ identifier ~ assign_ops ~ say_or_calc}
binary_calc = {(post | pre | neg | not | sign | unsign | index | say) ~ (binary_ops ~ say_or_calc)+}
ternary = { ( binary_calc | post | pre | neg | not | sign | unsign | index | say) ~ "?" ~ say_or_calc ~ ":" ~ say_or_calc }

literals = _{hex_literal | bool_literal | string_literal | float_literal | char_literal| integer_literal | ritual_const | identifier | "(" ~calc ~ ")"  }
            
args = {say_or_calc ~ ("," ~ say_or_calc)*}

pars = {identifier ~ type_def? ~("," ~ identifier ~ type_def?)*}
ft_pars = {identifier ~ type_def ~("," ~ identifier ~ type_def)*}


rtrn = {"->" ~ (calc | dec_or_say | identifier) | ( "(" ~ rtrn ~ ")")}
do_or_return = _{n_doo | rtrn }
sigil_asg = {(decoration? ~ mal? ~ "sigil "  ~ identifier ~ type_def?)  | (decoration? ~ mal? ~ "sigil "?  ~ ((pars ~ ("<-" | "=" ) ~args ) | ( args ~ "->" ~ pars))) | assign_calc}
print = { "say " ~ string_literal ~ ("<-" ~ args)?}
lambda = {("embed" ~ type_def? ~ ("<-" ~ ft_pars)? ~ (do_or_return)) | "(" ~lambda ~ ")"}
cast = {"cast " ~ (((args)? ~ "->" ~ (lambda | identifier) | ((lambda | identifier) ~ "<-" ~ args)))}

jjs = _{ indent | NEWLINE}
element_ident = {identifier ~ ":"}
ritual_args = {(element_ident? ~ say_or_calc) ~ jjs* ~ ("," ~ jjs* ~ (element_ident? ~ say_or_calc))*}
ritual_const = { identifier ~"{" ~ jjs* ~ ritual_args* ~jjs* ~"}"}
ritual_pars = { (":" ~ NEWLINE ~ PEEK_ALL ~ indent ~  element_ident ~ typee ~ (NEWLINE ~ PEEK_ALL ~ indent ~ (element_ident ~ typee)?)*)
				| ("{" ~ jjs* ~ (typee ~ ("," ~ jjs* ~  (typee))* )* ~jjs* ~"}" )}
ritual_dec = {decoration? ~ "ritual " ~ identifier ~ ritual_pars?}



n_doo =  _{":" ~ NEWLINE ~  PEEK_ALL ~ in_ctx ~ ctx ~ (rtrn |  dec_or_say)? ~ DROP ~ doo? ~ DROP}
doo = _{ NEWLINE ~ (PEEK_ALL ~ ctx ~ ( (rtrn |  dec_or_say )? ~ doo?) ~ DROP | doo)}
ctx = {PUSH(indent*)}
in_ctx = {PUSH(indent)}
say = _{lambda | cast | print | literals | "(" ~ sigil_asg ~ ")" | "(" ~say ~")"}
attach = {"attach " ~ file_type ~ identifier ~ "as "? ~ identifier?}
decoration = _{(privacy ~ target) | (target ~ privacy) | privacy | target}
spell_dec = {decoration? ~ "spell " ~ type_def? ~ identifier ~ ("<-" ~ ft_pars)? ~ do_or_return?}

calc = _{  transmute | ternary | binary_calc | post | pre | neg | not | sign | unsign | index}
dec_or_say = _{cond | breaking | (&lambda ~ say) | (&cast ~say) | sigil_asg | (&print ~ say) | post | pre | (!(identifier | literals) ~ say) | ( "(" ~dec_or_say ~ ")") }
in_file_dec = _{spell_dec | attach | ritual_dec | dec_or_say}


file = _{indent* ~ COMMENT ~file | NEWLINE ~ indent* ~ file | (((ctx ~  in_file_dec ) ~ DROP ~ (NEWLINE ~ file | EOI))*)}
